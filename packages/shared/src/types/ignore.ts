import type { Linter } from 'eslint'

const IGNORE = {
  bower_comp: '**/bower_components',
  build_dir: '**/build/**',
  change_log: '**/CHANGELOG.md',
  dist_dir: '**/dist',
  eslint_cache: '**/.eslintcache',
  fixtures: '**/__fixtures__',
  git_dir: '**/.git',
  history_dir: '**/.history',
  idea_dir: '**/.idea',
  istanbul_cov: '**/coverage/**',
  js_cov: '**/lib-cov',
  jspm: '**/jspm_packages',
  log_dir: '**/.log',
  logs_dir: '**/logs',
  map_files: '**/*.map',
  min_files: '**/*.min.*',
  mocks: '**/__mocks__',
  next_dir: '**/.next',
  node_modules: '**/node_modules',
  node_repl_history: '**/.node_repl_history',
  npm_cache: '**/.npm',
  npm_debug: '**/npm-debug.log*',
  npm_lock: '**/packages-lock.json',
  nuxt_dir: '**/.nuxt',
  nyc_cov: '**/.nyc_output',
  out_dir: '**/out/**',
  output_dir: '**/.output',
  pnpm_cache: '**/.pnpm',
  pnpm_debug: '**/.pnpm-debug.log*',
  pnpm_lock: '**/pnpm-lock.yaml',
  snapshots: '**/__snapshots__',
  temp_dir: '**/temp/**',
  test_dir: '**/test/**',
  tests_dir: '**/tests/**',
  tests: '**/__tests__',
  tmp_dir: '**/tmp',
  vscode_dir: '**/.vscode',
  yarn_cache: '**/.yarn',
  yarn_debug: '**/yarn-debug.log*',
  yarn_error: '**/yarn-error.log*',
  yarn_lock: '**/yarn.lock',
}

export const IgnoreGroups = {
  packageManagers: [
    IGNORE.npm_lock,
    IGNORE.yarn_lock,
    IGNORE.pnpm_lock,
    IGNORE.yarn_cache,
    IGNORE.npm_cache,
    IGNORE.pnpm_cache,
    IGNORE.npm_debug,
    IGNORE.yarn_debug,
    IGNORE.pnpm_debug,
    IGNORE.yarn_error,
  ],
  build: [
    IGNORE.build_dir,
    IGNORE.dist_dir,
    IGNORE.out_dir,
    IGNORE.temp_dir,
    IGNORE.map_files,
  ],
}

const notIgnored = {
  notDotDir: '!.*/**/*',
  notDotFile: '!.*',
  notSource: '!src/**/*',
  notRoot: '!**/*',
}

export const ignore: Linter.Config['ignorePatterns'] = [
  ...Object.values(notIgnored),
  ...Object.values(IgnoreGroups.packageManagers),
  ...Object.values(IgnoreGroups.build),
]
